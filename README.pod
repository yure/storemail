=encoding utf8

=pod
 
=head1 NAME
 
Servicator
 
=head1 SYNOPSIS
 
Mailing service with threaded conversation backend. 
 
=head1 CONFIGURATION

=head2 Config files
 
Setup mailing provider and DB info in config.yml. Example below:

	catch_all:
	  host: 'imap.gmail.com'
	  port: 993
	  username: 'info@mail.com'
	  password: 'passss'
	  ssl: 1


	plugins:
	  DBIC:
	    default:
	      dsn: dbi:mysql:dbname=Servicator
	      schema_class: Servicator::Schema
	      user: root
	      pass: toor
	      options:
	        mysql_enable_utf8: 1
	Email:
	  transport:
       SMTP:
         host: 'smtp.mandrillapp.com'
         port: 587
         sasl_username: 'info@mail.com'
         sasl_password: 'passss'
	  
=head2 DB deploy

You can easily deploy DB after you have set up config with bin/deploy.pl
	  
=head2 Running services

You need to run dancer application (bin/app.pl), to handle API requests and bin/catchall.pl script to fetch mail from inbox.

=head3 Catchall service

-s = seconds between inbox check

perl catchall.pl [-s 5] 

=head1 API Use

All API routes start with your domain. 

=head2 Conversation

New conververstaion is initiated automaticly with first message, user adding or subject setting.

=head3 Conversation data

GET /:domain/conversation/:id
	
Returns:

	{
		subject: string
		messages: [ 
			{	
			body: string,
			conversation_id: string,  
			date: string,  
			id: string,  
			sender: string,  
			},
		]
		users: [
			{
			email: string,
			name: stirng
			}
		]
	}

=head3 Conversation users

GET /:domain/conversation/:id/users
	
Returns a list of all users bind to conversation:

	{users: [ 
		{
			body: string,
			conversation_id: string,  
			date: string,  
			id: string,  
			sender: string,  
		}	
	]

=head3 All conversations

GET /:domain/conversation/:id/users
	
Returns a list of all conversations from current domain:

	[ 
		{ 
			"id" : "10@prevajalska-agencija.si" 
			"domain": string, 
			"subject" : null, 
			"date" : "2014-05-28 11:03:30", 	
		}, 
	]

=head3 Conversation config

POST /:domain/conversation/:id

Used for: 
- adding and removing users
- setting conversation subject

=head4 Adding user

	{add_user: 1, name: string, email: string }

=head4 Removing user

	{remove_user: 1, email: string}

=head4 Setting subject
It can only be set once.

	{subject: string}

Returns:

	1 if successful
	0 if unsucessful

=head3 Adding messages

POST /:domain/conversation/:id/message
Adds message to conversation and sends it around.

	{
		sender_email: string (must be one of conversation users)		
		body: string
		send_copy: 1 (optional, send mail to sender)
	}

Returns:

	{
		error: stirng (optional)
	}


=head2 Message

=head3 Conversation data

GET /:domain/message/:id
	
Returns:

	{ 
		"id" : string, 
		"conversation_id" : string, 
		"body" : string, 		
		"sender" : string, 
		"date" : string, 			
		"sender_email" : string, 
	}
	
=head1 GUI

=head2 Conversation thread

GET '/:domain/gui/conversation/:id

Shows messages and lets you reply. 
Lets you manage users and subject of conversation

=cut	
